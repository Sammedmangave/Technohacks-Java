import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PasswordGenerator {

    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String DIGITS = "0123456789";
    private static final String SPECIAL_CHARS = "!@#$%^&*()-_+=<>?";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter password length: ");
        int length = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        System.out.print("Include uppercase letters (y/n): ");
        boolean includeUppercase = scanner.nextLine().equalsIgnoreCase("y");

        System.out.print("Include lowercase letters (y/n): ");
        boolean includeLowercase = scanner.nextLine().equalsIgnoreCase("y");

        System.out.print("Include digits (y/n): ");
        boolean includeDigits = scanner.nextLine().equalsIgnoreCase("y");

        System.out.print("Include special characters (y/n): ");
        boolean includeSpecialChars = scanner.nextLine().equalsIgnoreCase("y");

        if (!includeUppercase && !includeLowercase && !includeDigits && !includeSpecialChars) {
            System.out.println("At least one character type must be selected.");
            return;
        }

        String characterPool = "";
        if (includeLowercase) {
            characterPool += LOWERCASE;
        }
        if (includeUppercase) {
            characterPool += UPPERCASE;
        }
        if (includeDigits) {
            characterPool += DIGITS;
        }
        if (includeSpecialChars) {
            characterPool += SPECIAL_CHARS;
        }

        if (characterPool.isEmpty()) {
            System.out.println("Character pool is empty. Cannot generate password.");
            return;
        }

        String password = generatePassword(characterPool, length);
        System.out.println("Generated Password: " + password);
    }

    private static String generatePassword(String characterPool, int length) {
        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characterPool.length());
            password.append(characterPool.charAt(index));
        }

        return password.toString();
    }
}
